package ksyun

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

// Provider returns a terraform.ResourceProvider.
func Provider() terraform.ResourceProvider {
	return &schema.Provider{
		Schema: map[string]*schema.Schema{
			"access_key": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_ACCESS_KEY", nil),
				Description: descriptions["access_key"],
			},
			"secret_key": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_SECRET_KEY", nil),
				Description: descriptions["secret_key"],
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_REGION", nil),
				Description: descriptions["region"],
			},
			"insecure": {
				Type:        schema.TypeBool,
				Optional:    true,
				Default:     true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_INSECURE", true),
				Description: descriptions["insecure"],
			},
			"domain": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_DOMAIN", ""),
				Description: descriptions["domain"],
			},
			"dry_run": {
				Type:        schema.TypeBool,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_DRY_RUN", false),
				Description: descriptions["dry_run"],
			},
			"ignore_service": {
				Type:        schema.TypeBool,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("KSYUN_DOMAIN_IGNORE_SERVICE", false),
				Description: descriptions["ignore_service"],
			},
		},
		DataSourcesMap: map[string]*schema.Resource{
			"ksyun_lines":                         dataSourceKsyunLines(),
			"ksyun_eips":                          dataSourceKsyunEips(),
			"ksyun_slbs":                          dataSourceKsyunLbs(),
			"ksyun_lbs":                           dataSourceKsyunLbs(),
			"ksyun_listeners":                     dataSourceKsyunListeners(),
			"ksyun_health_checks":                 dataSourceKsyunHealthChecks(),
			"ksyun_listener_servers":              dataSourceKsyunLbListenerServers(),
			"ksyun_lb_listener_servers":           dataSourceKsyunLbListenerServers(),
			"ksyun_lb_acls":                       dataSourceKsyunSlbAcls(),
			"ksyun_availability_zones":            dataSourceKsyunAvailabilityZones(),
			"ksyun_network_interfaces":            dataSourceKsyunNetworkInterfaces(),
			"ksyun_network_acls":                  dataSourceKsyunNetworkAcls(),
			"ksyun_vpcs":                          dataSourceKsyunVpcs(),
			"ksyun_subnets":                       dataSourceKsyunSubnets(),
			"ksyun_subnet_available_addresses":    dataSourceKsyunSubnetAvailableAddresses(),
			"ksyun_subnet_allocated_ip_addresses": dataSourceKsyunSubnetAllocatedIpAddresses(),
			"ksyun_security_groups":               dataSourceKsyunSecurityGroups(),
			"ksyun_instances":                     dataSourceKsyunInstances(),
			"ksyun_images":                        dataSourceKsyunImages(),
			"ksyun_sqlservers":                    dataSourceKsyunSqlServer(),
			"ksyun_krds":                          dataSourceKsyunKrds(),
			"ksyun_krds_security_groups":          dataSourceKsyunKrdsSecurityGroup(),
			"ksyun_certificates":                  dataSourceKsyunCertificates(),
			"ksyun_ssh_keys":                      dataSourceKsyunSSHKeys(),
			"ksyun_redis_instances":               dataSourceRedisInstances(),
			"ksyun_redis_security_groups":         dataSourceRedisSecurityGroups(),
			"ksyun_volumes":                       dataSourceKsyunVolumes(),
			"ksyun_mongodbs":                      dataSourceKsyunMongodbs(),
			"ksyun_lb_host_headers":               dataSourceKsyunListenerHostHeaders(),
			"ksyun_lb_rules":                      dataSourceKsyunSlbRules(),
			"ksyun_lb_backend_server_groups":      dataSourceKsyunBackendServerGroups(),
			"ksyun_lb_register_backend_servers":   dataSourceKsyunRegisterBackendServers(),
			"ksyun_routes":                        dataSourceKsyunRoutes(),
			"ksyun_nats":                          dataSourceKsyunNats(),
			"ksyun_scaling_configurations":        dataSourceKsyunScalingConfigurations(),
			"ksyun_scaling_groups":                dataSourceKsyunScalingGroups(),
			"ksyun_scaling_activities":            dataSourceKsyunScalingActivities(),
			"ksyun_scaling_instances":             dataSourceKsyunScalingInstances(),
			"ksyun_scaling_policies":              dataSourceKsyunScalingPolicies(),
			"ksyun_scaling_scheduled_tasks":       dataSourceKsyunScalingScheduledTasks(),
			"ksyun_scaling_notifications":         dataSourceKsyunScalingNotifications(),
			"ksyun_rabbitmqs":                     dataSourceKsyunRabbitmqs(),
			"ksyun_vpn_gateways":                  dataSourceKsyunVpnGateways(),
			"ksyun_vpn_customer_gateways":         dataSourceKsyunVpnCustomerGateways(),
			"ksyun_vpn_tunnels":                   dataSourceKsyunVpnTunnels(),
			"ksyun_bwses":                         dataSourceKsyunBandWidthShares(),
			"ksyun_bare_metals":                   dataSourceKsyunBareMetals(),
			"ksyun_bare_metal_images":             dataSourceKsyunBareMetalImages(),
			"ksyun_bare_metal_raid_attributes":    dataSourceKsyunBareMetalRaidAttributes(),
			"ksyun_tags":                          dataSourceKsyunTags(),
		},
		ResourcesMap: map[string]*schema.Resource{
			"ksyun_eip":                              resourceKsyunEip(),
			"ksyun_eip_associate":                    resourceKsyunEipAssociation(),
			"ksyun_lb":                               resourceKsyunLb(),
			"ksyun_healthcheck":                      resourceKsyunHealthCheck(),
			"ksyun_lb_listener":                      resourceKsyunListener(),
			"ksyun_lb_listener_server":               resourceKsyunInstancesWithListener(),
			"ksyun_lb_acl":                           resourceKsyunLoadBalancerAcl(),
			"ksyun_lb_acl_entry":                     resourceKsyunLoadBalancerAclEntry(),
			"ksyun_lb_listener_associate_acl":        resourceKsyunListenerAssociateAcl(),
			"ksyun_vpc":                              resourceKsyunVpc(),
			"ksyun_subnet":                           resourceKsyunSubnet(),
			"ksyun_security_group":                   resourceKsyunSecurityGroup(),
			"ksyun_security_group_entry":             resourceKsyunSecurityGroupEntry(),
			"ksyun_instance":                         resourceKsyunInstance(),
			"ksyun_sqlserver":                        resourceKsyunSqlServer(),
			"ksyun_kec_network_interface":            resourceKsyunKecNetworkInterface(),
			"ksyun_kec_network_interface_attachment": resourceKsyunKecNetworkInterfaceAttachment(),
			"ksyun_krds":                             resourceKsyunKrds(),
			"ksyun_krds_rr":                          resourceKsyunKrdsRr(),
			"ksyun_krds_security_group":              resourceKsyunKrdsSecurityGroup(),
			"ksyun_krds_security_group_rule":         resourceKsyunKrdsSecurityGroupRule(),
			"ksyun_certificate":                      resourceKsyunCertificate(),
			"ksyun_ssh_key":                          resourceKsyunSSHKey(),
			"ksyun_redis_instance":                   resourceRedisInstance(),
			"ksyun_redis_instance_node":              resourceRedisInstanceNode(),
			"ksyun_redis_sec_group":                  resourceRedisSecurityGroup(),
			"ksyun_redis_sec_group_rule":             resourceRedisSecurityGroupRule(),
			"ksyun_redis_sec_group_allocate":         resourceRedisSecurityGroupAllocate(),
			"ksyun_mongodb_instance":                 resourceKsyunMongodbInstance(),
			"ksyun_mongodb_shard_instance":           resourceKsyunMongodbShardInstance(),
			"ksyun_mongodb_shard_instance_node":      resourceKsyunMongodbShardInstanceNode(),
			"ksyun_mongodb_security_rule":            resourceKsyunMongodbSecurityRule(),
			"ksyun_volume":                           resourceKsyunVolume(),
			"ksyun_volume_attach":                    resourceKsyunVolumeAttach(),
			"ksyun_lb_rule":                          resourceKsyunSlbRule(),
			"ksyun_lb_host_header":                   resourceKsyunListenerHostHeader(),
			"ksyun_lb_backend_server_group":          resourceKsyunBackendServerGroup(),
			"ksyun_lb_register_backend_server":       resourceKsyunRegisterBackendServer(),
			"ksyun_route":                            resourceKsyunRoute(),
			"ksyun_nat":                              resourceKsyunNat(),
			"ksyun_nat_associate":                    resourceKsyunNatAssociation(),
			"ksyun_scaling_configuration":            resourceKsyunScalingConfiguration(),
			"ksyun_scaling_group":                    resourceKsyunScalingGroup(),
			"ksyun_scaling_instance":                 resourceKsyunScalingInstance(),
			"ksyun_scaling_policy":                   resourceKsyunScalingPolicy(),
			"ksyun_scaling_scheduled_task":           resourceKsyunScalingScheduledTask(),
			"ksyun_scaling_notification":             resourceKsyunScalingNotification(),
			"ksyun_rabbitmq_instance":                resourceKsyunRabbitmq(),
			"ksyun_rabbitmq_security_rule":           resourceKsyunRabbitmqSecurityRule(),
			"ksyun_network_acl":                      resourceKsyunNetworkAcl(),
			"ksyun_network_acl_entry":                resourceKsyunNetworkAclEntry(),
			"ksyun_network_acl_associate":            resourceKsyunNetworkAclAssociate(),
			"ksyun_vpn_gateway":                      resourceKsyunVpnGateway(),
			"ksyun_vpn_customer_gateway":             resourceKsyunVpnCustomerGateway(),
			"ksyun_vpn_tunnel":                       resourceKsyunVpnTunnel(),
			"ksyun_bws":                              resourceKsyunBandWidthShare(),
			"ksyun_bws_associate":                    resourceKsyunBandWidthShareAssociate(),
			"ksyun_bare_metal":                       resourceKsyunBareMetal(),
			"ksyun_tag":                              resourceKsyunTag(),
			"ksyun_iam_user":                         resourceIamUser(),
			"ksyun_iam_access_key":                   resourceIamAccessKey(),
			"ksyun_iam_group_membership":             resourceIamGroupMembership(),
		},
		ConfigureFunc: providerConfigure,
	}
}

func providerConfigure(d *schema.ResourceData) (interface{}, error) {
	config := Config{
		AccessKey:     d.Get("access_key").(string),
		SecretKey:     d.Get("secret_key").(string),
		Region:        d.Get("region").(string),
		Insecure:      d.Get("insecure").(bool),
		Domain:        d.Get("domain").(string),
		DryRun:        d.Get("dry_run").(bool),
		IgnoreService: d.Get("ignore_service").(bool),
	}
	client, err := config.Client()
	return client, err
}

var descriptions map[string]string

func init() {
	descriptions = map[string]string{
		"access_key":     "ak",
		"secret_key":     "sk",
		"region":         "cn-beijing-6",
		"insecure":       "true",
		"domain":         "",
		"dry_run":        "false",
		"ignore_service": "false",
	}
}
